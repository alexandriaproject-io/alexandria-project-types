// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ws

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"com/inference/common"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
// Attributes:
//  - Prompts
//  - StreamResponse
//  - OnlyNewTokens
//  - GenerationConfig
type WsInferenceRequest struct {
  Prompts []*common.SinglePrompt `thrift:"prompts,1" db:"prompts" json:"prompts"`
  StreamResponse *bool `thrift:"stream_response,2" db:"stream_response" json:"stream_response,omitempty"`
  OnlyNewTokens *bool `thrift:"only_new_tokens,3" db:"only_new_tokens" json:"only_new_tokens,omitempty"`
  GenerationConfig *common.GenerationConfig `thrift:"generation_config,4" db:"generation_config" json:"generation_config,omitempty"`
}

func NewWsInferenceRequest() *WsInferenceRequest {
  return &WsInferenceRequest{}
}


func (p *WsInferenceRequest) GetPrompts() []*common.SinglePrompt {
  return p.Prompts
}
var WsInferenceRequest_StreamResponse_DEFAULT bool
func (p *WsInferenceRequest) GetStreamResponse() bool {
  if !p.IsSetStreamResponse() {
    return WsInferenceRequest_StreamResponse_DEFAULT
  }
return *p.StreamResponse
}
var WsInferenceRequest_OnlyNewTokens_DEFAULT bool
func (p *WsInferenceRequest) GetOnlyNewTokens() bool {
  if !p.IsSetOnlyNewTokens() {
    return WsInferenceRequest_OnlyNewTokens_DEFAULT
  }
return *p.OnlyNewTokens
}
var WsInferenceRequest_GenerationConfig_DEFAULT *common.GenerationConfig
func (p *WsInferenceRequest) GetGenerationConfig() *common.GenerationConfig {
  if !p.IsSetGenerationConfig() {
    return WsInferenceRequest_GenerationConfig_DEFAULT
  }
return p.GenerationConfig
}
func (p *WsInferenceRequest) IsSetStreamResponse() bool {
  return p.StreamResponse != nil
}

func (p *WsInferenceRequest) IsSetOnlyNewTokens() bool {
  return p.OnlyNewTokens != nil
}

func (p *WsInferenceRequest) IsSetGenerationConfig() bool {
  return p.GenerationConfig != nil
}

func (p *WsInferenceRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SinglePrompt, 0, size)
  p.Prompts =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &common.SinglePrompt{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Prompts = append(p.Prompts, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WsInferenceRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StreamResponse = &v
}
  return nil
}

func (p *WsInferenceRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OnlyNewTokens = &v
}
  return nil
}

func (p *WsInferenceRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.GenerationConfig = &common.GenerationConfig{}
  if err := p.GenerationConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GenerationConfig), err)
  }
  return nil
}

func (p *WsInferenceRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prompts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prompts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Prompts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Prompts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prompts: ", p), err) }
  return err
}

func (p *WsInferenceRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStreamResponse() {
    if err := oprot.WriteFieldBegin("stream_response", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stream_response: ", p), err) }
    if err := oprot.WriteBool(bool(*p.StreamResponse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stream_response (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stream_response: ", p), err) }
  }
  return err
}

func (p *WsInferenceRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlyNewTokens() {
    if err := oprot.WriteFieldBegin("only_new_tokens", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:only_new_tokens: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OnlyNewTokens)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.only_new_tokens (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:only_new_tokens: ", p), err) }
  }
  return err
}

func (p *WsInferenceRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetGenerationConfig() {
    if err := oprot.WriteFieldBegin("generation_config", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:generation_config: ", p), err) }
    if err := p.GenerationConfig.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GenerationConfig), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:generation_config: ", p), err) }
  }
  return err
}

func (p *WsInferenceRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceRequest(%+v)", *p)
}

// Attributes:
//  - RequestID
type WsInferenceAcceptedEvent struct {
  RequestID string `thrift:"request_id,1" db:"request_id" json:"request_id"`
}

func NewWsInferenceAcceptedEvent() *WsInferenceAcceptedEvent {
  return &WsInferenceAcceptedEvent{}
}


func (p *WsInferenceAcceptedEvent) GetRequestID() string {
  return p.RequestID
}
func (p *WsInferenceAcceptedEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceAcceptedEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *WsInferenceAcceptedEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceAcceptedEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceAcceptedEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *WsInferenceAcceptedEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceAcceptedEvent(%+v)", *p)
}

// Attributes:
//  - RequestID
type WsInferenceStartedEvent struct {
  RequestID string `thrift:"request_id,1" db:"request_id" json:"request_id"`
}

func NewWsInferenceStartedEvent() *WsInferenceStartedEvent {
  return &WsInferenceStartedEvent{}
}


func (p *WsInferenceStartedEvent) GetRequestID() string {
  return p.RequestID
}
func (p *WsInferenceStartedEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceStartedEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *WsInferenceStartedEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceStartedEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceStartedEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *WsInferenceStartedEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceStartedEvent(%+v)", *p)
}

// Attributes:
//  - RequestID
//  - Text
type WsInferenceInitializedEvent struct {
  RequestID string `thrift:"request_id,1" db:"request_id" json:"request_id"`
  // unused field # 2
  Text string `thrift:"text,3" db:"text" json:"text"`
}

func NewWsInferenceInitializedEvent() *WsInferenceInitializedEvent {
  return &WsInferenceInitializedEvent{}
}


func (p *WsInferenceInitializedEvent) GetRequestID() string {
  return p.RequestID
}

func (p *WsInferenceInitializedEvent) GetText() string {
  return p.Text
}
func (p *WsInferenceInitializedEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceInitializedEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *WsInferenceInitializedEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *WsInferenceInitializedEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceInitializedEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceInitializedEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *WsInferenceInitializedEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err) }
  return err
}

func (p *WsInferenceInitializedEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceInitializedEvent(%+v)", *p)
}

// Attributes:
//  - RequestID
//  - Text
type WsInferenceProgressEvent struct {
  RequestID string `thrift:"request_id,1" db:"request_id" json:"request_id"`
  // unused field # 2
  Text string `thrift:"text,3" db:"text" json:"text"`
}

func NewWsInferenceProgressEvent() *WsInferenceProgressEvent {
  return &WsInferenceProgressEvent{}
}


func (p *WsInferenceProgressEvent) GetRequestID() string {
  return p.RequestID
}

func (p *WsInferenceProgressEvent) GetText() string {
  return p.Text
}
func (p *WsInferenceProgressEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceProgressEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *WsInferenceProgressEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *WsInferenceProgressEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceProgressEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceProgressEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *WsInferenceProgressEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err) }
  return err
}

func (p *WsInferenceProgressEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceProgressEvent(%+v)", *p)
}

// Attributes:
//  - RequestID
//  - Text
//  - IsEos
//  - NewTokensCount_
//  - ExecutionTime
type WsInferenceCompletionEvent struct {
  RequestID string `thrift:"request_id,1" db:"request_id" json:"request_id"`
  // unused field # 2
  Text string `thrift:"text,3" db:"text" json:"text"`
  IsEos bool `thrift:"is_eos,4" db:"is_eos" json:"is_eos"`
  NewTokensCount_ int32 `thrift:"new_tokens_count,5" db:"new_tokens_count" json:"new_tokens_count"`
  ExecutionTime float64 `thrift:"execution_time,6" db:"execution_time" json:"execution_time"`
}

func NewWsInferenceCompletionEvent() *WsInferenceCompletionEvent {
  return &WsInferenceCompletionEvent{}
}


func (p *WsInferenceCompletionEvent) GetRequestID() string {
  return p.RequestID
}

func (p *WsInferenceCompletionEvent) GetText() string {
  return p.Text
}

func (p *WsInferenceCompletionEvent) GetIsEos() bool {
  return p.IsEos
}

func (p *WsInferenceCompletionEvent) GetNewTokensCount_() int32 {
  return p.NewTokensCount_
}

func (p *WsInferenceCompletionEvent) GetExecutionTime() float64 {
  return p.ExecutionTime
}
func (p *WsInferenceCompletionEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceCompletionEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *WsInferenceCompletionEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *WsInferenceCompletionEvent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsEos = v
}
  return nil
}

func (p *WsInferenceCompletionEvent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NewTokensCount_ = v
}
  return nil
}

func (p *WsInferenceCompletionEvent)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExecutionTime = v
}
  return nil
}

func (p *WsInferenceCompletionEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceCompletionEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceCompletionEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *WsInferenceCompletionEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err) }
  return err
}

func (p *WsInferenceCompletionEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_eos", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_eos: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsEos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_eos (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_eos: ", p), err) }
  return err
}

func (p *WsInferenceCompletionEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_tokens_count", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:new_tokens_count: ", p), err) }
  if err := oprot.WriteI32(int32(p.NewTokensCount_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_tokens_count (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:new_tokens_count: ", p), err) }
  return err
}

func (p *WsInferenceCompletionEvent) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("execution_time", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:execution_time: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ExecutionTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execution_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:execution_time: ", p), err) }
  return err
}

func (p *WsInferenceCompletionEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceCompletionEvent(%+v)", *p)
}

// Attributes:
//  - RequestID
//  - Error
type WsInferenceErrorEvent struct {
  RequestID string `thrift:"request_id,1" db:"request_id" json:"request_id"`
  // unused field # 2
  Error string `thrift:"error,3" db:"error" json:"error"`
}

func NewWsInferenceErrorEvent() *WsInferenceErrorEvent {
  return &WsInferenceErrorEvent{}
}


func (p *WsInferenceErrorEvent) GetRequestID() string {
  return p.RequestID
}

func (p *WsInferenceErrorEvent) GetError() string {
  return p.Error
}
func (p *WsInferenceErrorEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceErrorEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *WsInferenceErrorEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *WsInferenceErrorEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceErrorEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceErrorEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *WsInferenceErrorEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error: ", p), err) }
  if err := oprot.WriteString(string(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error: ", p), err) }
  return err
}

func (p *WsInferenceErrorEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceErrorEvent(%+v)", *p)
}

// Attributes:
//  - Error
type WsErrorEvent struct {
  // unused fields # 1 to 2
  Error string `thrift:"error,3" db:"error" json:"error"`
}

func NewWsErrorEvent() *WsErrorEvent {
  return &WsErrorEvent{}
}


func (p *WsErrorEvent) GetError() string {
  return p.Error
}
func (p *WsErrorEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsErrorEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *WsErrorEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsErrorEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsErrorEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error: ", p), err) }
  if err := oprot.WriteString(string(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error: ", p), err) }
  return err
}

func (p *WsErrorEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsErrorEvent(%+v)", *p)
}

// Attributes:
//  - AcceptedEvent
//  - StartedEvent
//  - InitializedEvent
//  - ProgressEvent
//  - CompletionEvent
//  - ErrorEvent
//  - WsErrorEvent
type WsInferenceEvent struct {
  AcceptedEvent *WsInferenceAcceptedEvent `thrift:"acceptedEvent,1" db:"acceptedEvent" json:"acceptedEvent,omitempty"`
  StartedEvent *WsInferenceStartedEvent `thrift:"startedEvent,2" db:"startedEvent" json:"startedEvent,omitempty"`
  InitializedEvent *WsInferenceInitializedEvent `thrift:"initializedEvent,3" db:"initializedEvent" json:"initializedEvent,omitempty"`
  ProgressEvent *WsInferenceProgressEvent `thrift:"progressEvent,4" db:"progressEvent" json:"progressEvent,omitempty"`
  CompletionEvent *WsInferenceCompletionEvent `thrift:"completionEvent,5" db:"completionEvent" json:"completionEvent,omitempty"`
  ErrorEvent *WsInferenceErrorEvent `thrift:"errorEvent,6" db:"errorEvent" json:"errorEvent,omitempty"`
  WsErrorEvent *WsInferenceErrorEvent `thrift:"wsErrorEvent,7" db:"wsErrorEvent" json:"wsErrorEvent,omitempty"`
}

func NewWsInferenceEvent() *WsInferenceEvent {
  return &WsInferenceEvent{}
}

var WsInferenceEvent_AcceptedEvent_DEFAULT *WsInferenceAcceptedEvent
func (p *WsInferenceEvent) GetAcceptedEvent() *WsInferenceAcceptedEvent {
  if !p.IsSetAcceptedEvent() {
    return WsInferenceEvent_AcceptedEvent_DEFAULT
  }
return p.AcceptedEvent
}
var WsInferenceEvent_StartedEvent_DEFAULT *WsInferenceStartedEvent
func (p *WsInferenceEvent) GetStartedEvent() *WsInferenceStartedEvent {
  if !p.IsSetStartedEvent() {
    return WsInferenceEvent_StartedEvent_DEFAULT
  }
return p.StartedEvent
}
var WsInferenceEvent_InitializedEvent_DEFAULT *WsInferenceInitializedEvent
func (p *WsInferenceEvent) GetInitializedEvent() *WsInferenceInitializedEvent {
  if !p.IsSetInitializedEvent() {
    return WsInferenceEvent_InitializedEvent_DEFAULT
  }
return p.InitializedEvent
}
var WsInferenceEvent_ProgressEvent_DEFAULT *WsInferenceProgressEvent
func (p *WsInferenceEvent) GetProgressEvent() *WsInferenceProgressEvent {
  if !p.IsSetProgressEvent() {
    return WsInferenceEvent_ProgressEvent_DEFAULT
  }
return p.ProgressEvent
}
var WsInferenceEvent_CompletionEvent_DEFAULT *WsInferenceCompletionEvent
func (p *WsInferenceEvent) GetCompletionEvent() *WsInferenceCompletionEvent {
  if !p.IsSetCompletionEvent() {
    return WsInferenceEvent_CompletionEvent_DEFAULT
  }
return p.CompletionEvent
}
var WsInferenceEvent_ErrorEvent_DEFAULT *WsInferenceErrorEvent
func (p *WsInferenceEvent) GetErrorEvent() *WsInferenceErrorEvent {
  if !p.IsSetErrorEvent() {
    return WsInferenceEvent_ErrorEvent_DEFAULT
  }
return p.ErrorEvent
}
var WsInferenceEvent_WsErrorEvent_DEFAULT *WsInferenceErrorEvent
func (p *WsInferenceEvent) GetWsErrorEvent() *WsInferenceErrorEvent {
  if !p.IsSetWsErrorEvent() {
    return WsInferenceEvent_WsErrorEvent_DEFAULT
  }
return p.WsErrorEvent
}
func (p *WsInferenceEvent) CountSetFieldsWsInferenceEvent() int {
  count := 0
  if (p.IsSetAcceptedEvent()) {
    count++
  }
  if (p.IsSetStartedEvent()) {
    count++
  }
  if (p.IsSetInitializedEvent()) {
    count++
  }
  if (p.IsSetProgressEvent()) {
    count++
  }
  if (p.IsSetCompletionEvent()) {
    count++
  }
  if (p.IsSetErrorEvent()) {
    count++
  }
  if (p.IsSetWsErrorEvent()) {
    count++
  }
  return count

}

func (p *WsInferenceEvent) IsSetAcceptedEvent() bool {
  return p.AcceptedEvent != nil
}

func (p *WsInferenceEvent) IsSetStartedEvent() bool {
  return p.StartedEvent != nil
}

func (p *WsInferenceEvent) IsSetInitializedEvent() bool {
  return p.InitializedEvent != nil
}

func (p *WsInferenceEvent) IsSetProgressEvent() bool {
  return p.ProgressEvent != nil
}

func (p *WsInferenceEvent) IsSetCompletionEvent() bool {
  return p.CompletionEvent != nil
}

func (p *WsInferenceEvent) IsSetErrorEvent() bool {
  return p.ErrorEvent != nil
}

func (p *WsInferenceEvent) IsSetWsErrorEvent() bool {
  return p.WsErrorEvent != nil
}

func (p *WsInferenceEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.AcceptedEvent = &WsInferenceAcceptedEvent{}
  if err := p.AcceptedEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AcceptedEvent), err)
  }
  return nil
}

func (p *WsInferenceEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.StartedEvent = &WsInferenceStartedEvent{}
  if err := p.StartedEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartedEvent), err)
  }
  return nil
}

func (p *WsInferenceEvent)  ReadField3(iprot thrift.TProtocol) error {
  p.InitializedEvent = &WsInferenceInitializedEvent{}
  if err := p.InitializedEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InitializedEvent), err)
  }
  return nil
}

func (p *WsInferenceEvent)  ReadField4(iprot thrift.TProtocol) error {
  p.ProgressEvent = &WsInferenceProgressEvent{}
  if err := p.ProgressEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProgressEvent), err)
  }
  return nil
}

func (p *WsInferenceEvent)  ReadField5(iprot thrift.TProtocol) error {
  p.CompletionEvent = &WsInferenceCompletionEvent{}
  if err := p.CompletionEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompletionEvent), err)
  }
  return nil
}

func (p *WsInferenceEvent)  ReadField6(iprot thrift.TProtocol) error {
  p.ErrorEvent = &WsInferenceErrorEvent{}
  if err := p.ErrorEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ErrorEvent), err)
  }
  return nil
}

func (p *WsInferenceEvent)  ReadField7(iprot thrift.TProtocol) error {
  p.WsErrorEvent = &WsInferenceErrorEvent{}
  if err := p.WsErrorEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WsErrorEvent), err)
  }
  return nil
}

func (p *WsInferenceEvent) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsWsInferenceEvent(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("WsInferenceEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAcceptedEvent() {
    if err := oprot.WriteFieldBegin("acceptedEvent", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acceptedEvent: ", p), err) }
    if err := p.AcceptedEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AcceptedEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acceptedEvent: ", p), err) }
  }
  return err
}

func (p *WsInferenceEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEvent() {
    if err := oprot.WriteFieldBegin("startedEvent", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startedEvent: ", p), err) }
    if err := p.StartedEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartedEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startedEvent: ", p), err) }
  }
  return err
}

func (p *WsInferenceEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInitializedEvent() {
    if err := oprot.WriteFieldBegin("initializedEvent", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:initializedEvent: ", p), err) }
    if err := p.InitializedEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InitializedEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:initializedEvent: ", p), err) }
  }
  return err
}

func (p *WsInferenceEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetProgressEvent() {
    if err := oprot.WriteFieldBegin("progressEvent", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:progressEvent: ", p), err) }
    if err := p.ProgressEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProgressEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:progressEvent: ", p), err) }
  }
  return err
}

func (p *WsInferenceEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCompletionEvent() {
    if err := oprot.WriteFieldBegin("completionEvent", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:completionEvent: ", p), err) }
    if err := p.CompletionEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompletionEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:completionEvent: ", p), err) }
  }
  return err
}

func (p *WsInferenceEvent) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorEvent() {
    if err := oprot.WriteFieldBegin("errorEvent", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:errorEvent: ", p), err) }
    if err := p.ErrorEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ErrorEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:errorEvent: ", p), err) }
  }
  return err
}

func (p *WsInferenceEvent) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetWsErrorEvent() {
    if err := oprot.WriteFieldBegin("wsErrorEvent", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:wsErrorEvent: ", p), err) }
    if err := p.WsErrorEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WsErrorEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:wsErrorEvent: ", p), err) }
  }
  return err
}

func (p *WsInferenceEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceEvent(%+v)", *p)
}

// Attributes:
//  - Events
type WsInferenceResponse struct {
  Events []*WsInferenceEvent `thrift:"events,1" db:"events" json:"events"`
}

func NewWsInferenceResponse() *WsInferenceResponse {
  return &WsInferenceResponse{}
}


func (p *WsInferenceResponse) GetEvents() []*WsInferenceEvent {
  return p.Events
}
func (p *WsInferenceResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WsInferenceResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WsInferenceEvent, 0, size)
  p.Events =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &WsInferenceEvent{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Events = append(p.Events, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WsInferenceResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WsInferenceResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WsInferenceResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("events", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:events: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Events)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Events {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:events: ", p), err) }
  return err
}

func (p *WsInferenceResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WsInferenceResponse(%+v)", *p)
}

