// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package nats

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Search
//  - DocumentIds
//  - Offset
//  - Limit
//  - Sf
type MilvusSegmentGetRequest struct {
  Search string `thrift:"search,1" db:"search" json:"search"`
  DocumentIds []string `thrift:"document_ids,2" db:"document_ids" json:"document_ids,omitempty"`
  Offset *int16 `thrift:"offset,3" db:"offset" json:"offset,omitempty"`
  Limit *int16 `thrift:"limit,4" db:"limit" json:"limit,omitempty"`
  Sf *int16 `thrift:"sf,5" db:"sf" json:"sf,omitempty"`
}

func NewMilvusSegmentGetRequest() *MilvusSegmentGetRequest {
  return &MilvusSegmentGetRequest{}
}


func (p *MilvusSegmentGetRequest) GetSearch() string {
  return p.Search
}
var MilvusSegmentGetRequest_DocumentIds_DEFAULT []string

func (p *MilvusSegmentGetRequest) GetDocumentIds() []string {
  return p.DocumentIds
}
var MilvusSegmentGetRequest_Offset_DEFAULT int16
func (p *MilvusSegmentGetRequest) GetOffset() int16 {
  if !p.IsSetOffset() {
    return MilvusSegmentGetRequest_Offset_DEFAULT
  }
return *p.Offset
}
var MilvusSegmentGetRequest_Limit_DEFAULT int16
func (p *MilvusSegmentGetRequest) GetLimit() int16 {
  if !p.IsSetLimit() {
    return MilvusSegmentGetRequest_Limit_DEFAULT
  }
return *p.Limit
}
var MilvusSegmentGetRequest_Sf_DEFAULT int16
func (p *MilvusSegmentGetRequest) GetSf() int16 {
  if !p.IsSetSf() {
    return MilvusSegmentGetRequest_Sf_DEFAULT
  }
return *p.Sf
}
func (p *MilvusSegmentGetRequest) IsSetDocumentIds() bool {
  return p.DocumentIds != nil
}

func (p *MilvusSegmentGetRequest) IsSetOffset() bool {
  return p.Offset != nil
}

func (p *MilvusSegmentGetRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *MilvusSegmentGetRequest) IsSetSf() bool {
  return p.Sf != nil
}

func (p *MilvusSegmentGetRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MilvusSegmentGetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Search = v
}
  return nil
}

func (p *MilvusSegmentGetRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.DocumentIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.DocumentIds = append(p.DocumentIds, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MilvusSegmentGetRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Offset = &v
}
  return nil
}

func (p *MilvusSegmentGetRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *MilvusSegmentGetRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Sf = &v
}
  return nil
}

func (p *MilvusSegmentGetRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MilvusSegmentGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MilvusSegmentGetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("search", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:search: ", p), err) }
  if err := oprot.WriteString(string(p.Search)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.search (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:search: ", p), err) }
  return err
}

func (p *MilvusSegmentGetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDocumentIds() {
    if err := oprot.WriteFieldBegin("document_ids", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:document_ids: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.DocumentIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DocumentIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:document_ids: ", p), err) }
  }
  return err
}

func (p *MilvusSegmentGetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOffset() {
    if err := oprot.WriteFieldBegin("offset", thrift.I16, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Offset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.offset (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset: ", p), err) }
  }
  return err
}

func (p *MilvusSegmentGetRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I16, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  }
  return err
}

func (p *MilvusSegmentGetRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSf() {
    if err := oprot.WriteFieldBegin("sf", thrift.I16, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sf: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Sf)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sf (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sf: ", p), err) }
  }
  return err
}

func (p *MilvusSegmentGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MilvusSegmentGetRequest(%+v)", *p)
}

// Attributes:
//  - SegmentText
//  - DocumentID
//  - SectionID
//  - SegmentID
type MilvusSegmentUpsertPayload struct {
  SegmentText string `thrift:"segment_text,1" db:"segment_text" json:"segment_text"`
  DocumentID string `thrift:"document_id,2" db:"document_id" json:"document_id"`
  SectionID string `thrift:"section_id,3" db:"section_id" json:"section_id"`
  SegmentID string `thrift:"segment_id,4" db:"segment_id" json:"segment_id"`
}

func NewMilvusSegmentUpsertPayload() *MilvusSegmentUpsertPayload {
  return &MilvusSegmentUpsertPayload{}
}


func (p *MilvusSegmentUpsertPayload) GetSegmentText() string {
  return p.SegmentText
}

func (p *MilvusSegmentUpsertPayload) GetDocumentID() string {
  return p.DocumentID
}

func (p *MilvusSegmentUpsertPayload) GetSectionID() string {
  return p.SectionID
}

func (p *MilvusSegmentUpsertPayload) GetSegmentID() string {
  return p.SegmentID
}
func (p *MilvusSegmentUpsertPayload) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MilvusSegmentUpsertPayload)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SegmentText = v
}
  return nil
}

func (p *MilvusSegmentUpsertPayload)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DocumentID = v
}
  return nil
}

func (p *MilvusSegmentUpsertPayload)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SectionID = v
}
  return nil
}

func (p *MilvusSegmentUpsertPayload)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SegmentID = v
}
  return nil
}

func (p *MilvusSegmentUpsertPayload) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MilvusSegmentUpsertPayload"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MilvusSegmentUpsertPayload) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("segment_text", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment_text: ", p), err) }
  if err := oprot.WriteString(string(p.SegmentText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment_text (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment_text: ", p), err) }
  return err
}

func (p *MilvusSegmentUpsertPayload) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("document_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:document_id: ", p), err) }
  if err := oprot.WriteString(string(p.DocumentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.document_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:document_id: ", p), err) }
  return err
}

func (p *MilvusSegmentUpsertPayload) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("section_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:section_id: ", p), err) }
  if err := oprot.WriteString(string(p.SectionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.section_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:section_id: ", p), err) }
  return err
}

func (p *MilvusSegmentUpsertPayload) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("segment_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:segment_id: ", p), err) }
  if err := oprot.WriteString(string(p.SegmentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:segment_id: ", p), err) }
  return err
}

func (p *MilvusSegmentUpsertPayload) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MilvusSegmentUpsertPayload(%+v)", *p)
}

// Attributes:
//  - DocumentID
//  - SectionID
//  - SegmentID
type MilvusSegmentDeletePayload struct {
  // unused field # 1
  DocumentID string `thrift:"document_id,2" db:"document_id" json:"document_id"`
  SectionID string `thrift:"section_id,3" db:"section_id" json:"section_id"`
  SegmentID string `thrift:"segment_id,4" db:"segment_id" json:"segment_id"`
}

func NewMilvusSegmentDeletePayload() *MilvusSegmentDeletePayload {
  return &MilvusSegmentDeletePayload{}
}


func (p *MilvusSegmentDeletePayload) GetDocumentID() string {
  return p.DocumentID
}

func (p *MilvusSegmentDeletePayload) GetSectionID() string {
  return p.SectionID
}

func (p *MilvusSegmentDeletePayload) GetSegmentID() string {
  return p.SegmentID
}
func (p *MilvusSegmentDeletePayload) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MilvusSegmentDeletePayload)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DocumentID = v
}
  return nil
}

func (p *MilvusSegmentDeletePayload)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SectionID = v
}
  return nil
}

func (p *MilvusSegmentDeletePayload)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SegmentID = v
}
  return nil
}

func (p *MilvusSegmentDeletePayload) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MilvusSegmentDeletePayload"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MilvusSegmentDeletePayload) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("document_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:document_id: ", p), err) }
  if err := oprot.WriteString(string(p.DocumentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.document_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:document_id: ", p), err) }
  return err
}

func (p *MilvusSegmentDeletePayload) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("section_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:section_id: ", p), err) }
  if err := oprot.WriteString(string(p.SectionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.section_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:section_id: ", p), err) }
  return err
}

func (p *MilvusSegmentDeletePayload) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("segment_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:segment_id: ", p), err) }
  if err := oprot.WriteString(string(p.SegmentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:segment_id: ", p), err) }
  return err
}

func (p *MilvusSegmentDeletePayload) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MilvusSegmentDeletePayload(%+v)", *p)
}

// Attributes:
//  - Distance
//  - DocumentID
//  - SectionID
//  - SegmentID
type L2SegmentSearchResult_ struct {
  Distance float64 `thrift:"distance,1" db:"distance" json:"distance"`
  DocumentID string `thrift:"document_id,2" db:"document_id" json:"document_id"`
  SectionID string `thrift:"section_id,3" db:"section_id" json:"section_id"`
  SegmentID string `thrift:"segment_id,4" db:"segment_id" json:"segment_id"`
}

func NewL2SegmentSearchResult_() *L2SegmentSearchResult_ {
  return &L2SegmentSearchResult_{}
}


func (p *L2SegmentSearchResult_) GetDistance() float64 {
  return p.Distance
}

func (p *L2SegmentSearchResult_) GetDocumentID() string {
  return p.DocumentID
}

func (p *L2SegmentSearchResult_) GetSectionID() string {
  return p.SectionID
}

func (p *L2SegmentSearchResult_) GetSegmentID() string {
  return p.SegmentID
}
func (p *L2SegmentSearchResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *L2SegmentSearchResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Distance = v
}
  return nil
}

func (p *L2SegmentSearchResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DocumentID = v
}
  return nil
}

func (p *L2SegmentSearchResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SectionID = v
}
  return nil
}

func (p *L2SegmentSearchResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SegmentID = v
}
  return nil
}

func (p *L2SegmentSearchResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("L2SegmentSearchResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *L2SegmentSearchResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("distance", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:distance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Distance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.distance (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:distance: ", p), err) }
  return err
}

func (p *L2SegmentSearchResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("document_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:document_id: ", p), err) }
  if err := oprot.WriteString(string(p.DocumentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.document_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:document_id: ", p), err) }
  return err
}

func (p *L2SegmentSearchResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("section_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:section_id: ", p), err) }
  if err := oprot.WriteString(string(p.SectionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.section_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:section_id: ", p), err) }
  return err
}

func (p *L2SegmentSearchResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("segment_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:segment_id: ", p), err) }
  if err := oprot.WriteString(string(p.SegmentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:segment_id: ", p), err) }
  return err
}

func (p *L2SegmentSearchResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("L2SegmentSearchResult_(%+v)", *p)
}

// Attributes:
//  - Results
//  - Total
//  - IsError
//  - ErrorText
type L2SegmentSearchResponse struct {
  Results []*L2SegmentSearchResult_ `thrift:"results,1" db:"results" json:"results"`
  Total int32 `thrift:"total,2" db:"total" json:"total"`
  IsError bool `thrift:"is_error,3" db:"is_error" json:"is_error"`
  ErrorText *string `thrift:"error_text,4" db:"error_text" json:"error_text,omitempty"`
}

func NewL2SegmentSearchResponse() *L2SegmentSearchResponse {
  return &L2SegmentSearchResponse{}
}


func (p *L2SegmentSearchResponse) GetResults() []*L2SegmentSearchResult_ {
  return p.Results
}

func (p *L2SegmentSearchResponse) GetTotal() int32 {
  return p.Total
}

func (p *L2SegmentSearchResponse) GetIsError() bool {
  return p.IsError
}
var L2SegmentSearchResponse_ErrorText_DEFAULT string
func (p *L2SegmentSearchResponse) GetErrorText() string {
  if !p.IsSetErrorText() {
    return L2SegmentSearchResponse_ErrorText_DEFAULT
  }
return *p.ErrorText
}
func (p *L2SegmentSearchResponse) IsSetErrorText() bool {
  return p.ErrorText != nil
}

func (p *L2SegmentSearchResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *L2SegmentSearchResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*L2SegmentSearchResult_, 0, size)
  p.Results =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &L2SegmentSearchResult_{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Results = append(p.Results, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *L2SegmentSearchResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Total = v
}
  return nil
}

func (p *L2SegmentSearchResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsError = v
}
  return nil
}

func (p *L2SegmentSearchResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ErrorText = &v
}
  return nil
}

func (p *L2SegmentSearchResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("L2SegmentSearchResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *L2SegmentSearchResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:results: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Results {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:results: ", p), err) }
  return err
}

func (p *L2SegmentSearchResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err) }
  if err := oprot.WriteI32(int32(p.Total)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err) }
  return err
}

func (p *L2SegmentSearchResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_error", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_error: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsError)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_error (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_error: ", p), err) }
  return err
}

func (p *L2SegmentSearchResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorText() {
    if err := oprot.WriteFieldBegin("error_text", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:error_text: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorText)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_text (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:error_text: ", p), err) }
  }
  return err
}

func (p *L2SegmentSearchResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("L2SegmentSearchResponse(%+v)", *p)
}

// Attributes:
//  - InsertCount
//  - UpdateCount
//  - DeleteCount
//  - IsError
//  - ErrorText
type L2SegmentUpsertResponse struct {
  InsertCount int32 `thrift:"insert_count,1" db:"insert_count" json:"insert_count"`
  UpdateCount int32 `thrift:"update_count,2" db:"update_count" json:"update_count"`
  DeleteCount int32 `thrift:"delete_count,3" db:"delete_count" json:"delete_count"`
  IsError bool `thrift:"is_error,4" db:"is_error" json:"is_error"`
  ErrorText *string `thrift:"error_text,5" db:"error_text" json:"error_text,omitempty"`
}

func NewL2SegmentUpsertResponse() *L2SegmentUpsertResponse {
  return &L2SegmentUpsertResponse{}
}


func (p *L2SegmentUpsertResponse) GetInsertCount() int32 {
  return p.InsertCount
}

func (p *L2SegmentUpsertResponse) GetUpdateCount() int32 {
  return p.UpdateCount
}

func (p *L2SegmentUpsertResponse) GetDeleteCount() int32 {
  return p.DeleteCount
}

func (p *L2SegmentUpsertResponse) GetIsError() bool {
  return p.IsError
}
var L2SegmentUpsertResponse_ErrorText_DEFAULT string
func (p *L2SegmentUpsertResponse) GetErrorText() string {
  if !p.IsSetErrorText() {
    return L2SegmentUpsertResponse_ErrorText_DEFAULT
  }
return *p.ErrorText
}
func (p *L2SegmentUpsertResponse) IsSetErrorText() bool {
  return p.ErrorText != nil
}

func (p *L2SegmentUpsertResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *L2SegmentUpsertResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InsertCount = v
}
  return nil
}

func (p *L2SegmentUpsertResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UpdateCount = v
}
  return nil
}

func (p *L2SegmentUpsertResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeleteCount = v
}
  return nil
}

func (p *L2SegmentUpsertResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsError = v
}
  return nil
}

func (p *L2SegmentUpsertResponse)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ErrorText = &v
}
  return nil
}

func (p *L2SegmentUpsertResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("L2SegmentUpsertResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *L2SegmentUpsertResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("insert_count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:insert_count: ", p), err) }
  if err := oprot.WriteI32(int32(p.InsertCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.insert_count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:insert_count: ", p), err) }
  return err
}

func (p *L2SegmentUpsertResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:update_count: ", p), err) }
  if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:update_count: ", p), err) }
  return err
}

func (p *L2SegmentUpsertResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delete_count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:delete_count: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeleteCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delete_count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:delete_count: ", p), err) }
  return err
}

func (p *L2SegmentUpsertResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_error", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_error: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsError)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_error (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_error: ", p), err) }
  return err
}

func (p *L2SegmentUpsertResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorText() {
    if err := oprot.WriteFieldBegin("error_text", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error_text: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorText)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_text (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error_text: ", p), err) }
  }
  return err
}

func (p *L2SegmentUpsertResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("L2SegmentUpsertResponse(%+v)", *p)
}

// Attributes:
//  - DeleteCount
//  - IsError
//  - ErrorText
type L2SegmentDeleteResponse struct {
  DeleteCount int32 `thrift:"delete_count,1" db:"delete_count" json:"delete_count"`
  // unused field # 2
  IsError bool `thrift:"is_error,3" db:"is_error" json:"is_error"`
  ErrorText *string `thrift:"error_text,4" db:"error_text" json:"error_text,omitempty"`
}

func NewL2SegmentDeleteResponse() *L2SegmentDeleteResponse {
  return &L2SegmentDeleteResponse{}
}


func (p *L2SegmentDeleteResponse) GetDeleteCount() int32 {
  return p.DeleteCount
}

func (p *L2SegmentDeleteResponse) GetIsError() bool {
  return p.IsError
}
var L2SegmentDeleteResponse_ErrorText_DEFAULT string
func (p *L2SegmentDeleteResponse) GetErrorText() string {
  if !p.IsSetErrorText() {
    return L2SegmentDeleteResponse_ErrorText_DEFAULT
  }
return *p.ErrorText
}
func (p *L2SegmentDeleteResponse) IsSetErrorText() bool {
  return p.ErrorText != nil
}

func (p *L2SegmentDeleteResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *L2SegmentDeleteResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeleteCount = v
}
  return nil
}

func (p *L2SegmentDeleteResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsError = v
}
  return nil
}

func (p *L2SegmentDeleteResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ErrorText = &v
}
  return nil
}

func (p *L2SegmentDeleteResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("L2SegmentDeleteResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *L2SegmentDeleteResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("delete_count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:delete_count: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeleteCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delete_count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:delete_count: ", p), err) }
  return err
}

func (p *L2SegmentDeleteResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_error", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_error: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsError)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_error (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_error: ", p), err) }
  return err
}

func (p *L2SegmentDeleteResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorText() {
    if err := oprot.WriteFieldBegin("error_text", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:error_text: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorText)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_text (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:error_text: ", p), err) }
  }
  return err
}

func (p *L2SegmentDeleteResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("L2SegmentDeleteResponse(%+v)", *p)
}

