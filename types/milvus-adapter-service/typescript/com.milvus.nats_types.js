//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


MilvusSegmentGetRequest = function(args) {
  this.search = null;
  this.document_ids = null;
  this.offset = null;
  this.limit = null;
  this.sf = null;
  if (args) {
    if (args.search !== undefined && args.search !== null) {
      this.search = args.search;
    }
    if (args.document_ids !== undefined && args.document_ids !== null) {
      this.document_ids = Thrift.copyList(args.document_ids, [null]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.sf !== undefined && args.sf !== null) {
      this.sf = args.sf;
    }
  }
};
MilvusSegmentGetRequest.prototype = {};
MilvusSegmentGetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.search = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.document_ids = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.document_ids.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.offset = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.limit = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.sf = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MilvusSegmentGetRequest.prototype.write = function(output) {
  output.writeStructBegin('MilvusSegmentGetRequest');
  if (this.search !== null && this.search !== undefined) {
    output.writeFieldBegin('search', Thrift.Type.STRING, 1);
    output.writeString(this.search);
    output.writeFieldEnd();
  }
  if (this.document_ids !== null && this.document_ids !== undefined) {
    output.writeFieldBegin('document_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.document_ids.length);
    for (var iter4 in this.document_ids) {
      if (this.document_ids.hasOwnProperty(iter4)) {
        iter4 = this.document_ids[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I16, 3);
    output.writeI16(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I16, 4);
    output.writeI16(this.limit);
    output.writeFieldEnd();
  }
  if (this.sf !== null && this.sf !== undefined) {
    output.writeFieldBegin('sf', Thrift.Type.I16, 5);
    output.writeI16(this.sf);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MilvusSegmentUpsertPayload = function(args) {
  this.segment_text = null;
  this.document_id = null;
  this.section_id = null;
  this.segment_id = null;
  if (args) {
    if (args.segment_text !== undefined && args.segment_text !== null) {
      this.segment_text = args.segment_text;
    }
    if (args.document_id !== undefined && args.document_id !== null) {
      this.document_id = args.document_id;
    }
    if (args.section_id !== undefined && args.section_id !== null) {
      this.section_id = args.section_id;
    }
    if (args.segment_id !== undefined && args.segment_id !== null) {
      this.segment_id = args.segment_id;
    }
  }
};
MilvusSegmentUpsertPayload.prototype = {};
MilvusSegmentUpsertPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.segment_text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.document_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.section_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.segment_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MilvusSegmentUpsertPayload.prototype.write = function(output) {
  output.writeStructBegin('MilvusSegmentUpsertPayload');
  if (this.segment_text !== null && this.segment_text !== undefined) {
    output.writeFieldBegin('segment_text', Thrift.Type.STRING, 1);
    output.writeString(this.segment_text);
    output.writeFieldEnd();
  }
  if (this.document_id !== null && this.document_id !== undefined) {
    output.writeFieldBegin('document_id', Thrift.Type.STRING, 2);
    output.writeString(this.document_id);
    output.writeFieldEnd();
  }
  if (this.section_id !== null && this.section_id !== undefined) {
    output.writeFieldBegin('section_id', Thrift.Type.STRING, 3);
    output.writeString(this.section_id);
    output.writeFieldEnd();
  }
  if (this.segment_id !== null && this.segment_id !== undefined) {
    output.writeFieldBegin('segment_id', Thrift.Type.STRING, 4);
    output.writeString(this.segment_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MilvusSegmentDeletePayload = function(args) {
  this.document_id = null;
  this.section_id = null;
  this.segment_id = null;
  if (args) {
    if (args.document_id !== undefined && args.document_id !== null) {
      this.document_id = args.document_id;
    }
    if (args.section_id !== undefined && args.section_id !== null) {
      this.section_id = args.section_id;
    }
    if (args.segment_id !== undefined && args.segment_id !== null) {
      this.segment_id = args.segment_id;
    }
  }
};
MilvusSegmentDeletePayload.prototype = {};
MilvusSegmentDeletePayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.document_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.section_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.segment_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MilvusSegmentDeletePayload.prototype.write = function(output) {
  output.writeStructBegin('MilvusSegmentDeletePayload');
  if (this.document_id !== null && this.document_id !== undefined) {
    output.writeFieldBegin('document_id', Thrift.Type.STRING, 2);
    output.writeString(this.document_id);
    output.writeFieldEnd();
  }
  if (this.section_id !== null && this.section_id !== undefined) {
    output.writeFieldBegin('section_id', Thrift.Type.STRING, 3);
    output.writeString(this.section_id);
    output.writeFieldEnd();
  }
  if (this.segment_id !== null && this.segment_id !== undefined) {
    output.writeFieldBegin('segment_id', Thrift.Type.STRING, 4);
    output.writeString(this.segment_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

L2SegmentSearchResult = function(args) {
  this.distance = null;
  this.document_id = null;
  this.section_id = null;
  this.segment_id = null;
  if (args) {
    if (args.distance !== undefined && args.distance !== null) {
      this.distance = args.distance;
    }
    if (args.document_id !== undefined && args.document_id !== null) {
      this.document_id = args.document_id;
    }
    if (args.section_id !== undefined && args.section_id !== null) {
      this.section_id = args.section_id;
    }
    if (args.segment_id !== undefined && args.segment_id !== null) {
      this.segment_id = args.segment_id;
    }
  }
};
L2SegmentSearchResult.prototype = {};
L2SegmentSearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.distance = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.document_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.section_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.segment_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

L2SegmentSearchResult.prototype.write = function(output) {
  output.writeStructBegin('L2SegmentSearchResult');
  if (this.distance !== null && this.distance !== undefined) {
    output.writeFieldBegin('distance', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.distance);
    output.writeFieldEnd();
  }
  if (this.document_id !== null && this.document_id !== undefined) {
    output.writeFieldBegin('document_id', Thrift.Type.STRING, 2);
    output.writeString(this.document_id);
    output.writeFieldEnd();
  }
  if (this.section_id !== null && this.section_id !== undefined) {
    output.writeFieldBegin('section_id', Thrift.Type.STRING, 3);
    output.writeString(this.section_id);
    output.writeFieldEnd();
  }
  if (this.segment_id !== null && this.segment_id !== undefined) {
    output.writeFieldBegin('segment_id', Thrift.Type.STRING, 4);
    output.writeString(this.segment_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

L2SegmentSearchResponse = function(args) {
  this.results = null;
  this.total = null;
  this.is_error = null;
  this.error_text = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [L2SegmentSearchResult]);
    }
    if (args.total !== undefined && args.total !== null) {
      this.total = args.total;
    }
    if (args.is_error !== undefined && args.is_error !== null) {
      this.is_error = args.is_error;
    }
    if (args.error_text !== undefined && args.error_text !== null) {
      this.error_text = args.error_text;
    }
  }
};
L2SegmentSearchResponse.prototype = {};
L2SegmentSearchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.results = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new L2SegmentSearchResult();
          elem8.read(input);
          this.results.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_error = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.error_text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

L2SegmentSearchResponse.prototype.write = function(output) {
  output.writeStructBegin('L2SegmentSearchResponse');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter9 in this.results) {
      if (this.results.hasOwnProperty(iter9)) {
        iter9 = this.results[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 2);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.is_error !== null && this.is_error !== undefined) {
    output.writeFieldBegin('is_error', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_error);
    output.writeFieldEnd();
  }
  if (this.error_text !== null && this.error_text !== undefined) {
    output.writeFieldBegin('error_text', Thrift.Type.STRING, 4);
    output.writeString(this.error_text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

L2SegmentUpsertResponse = function(args) {
  this.insert_count = null;
  this.update_count = null;
  this.delete_count = null;
  this.is_error = null;
  this.error_text = null;
  if (args) {
    if (args.insert_count !== undefined && args.insert_count !== null) {
      this.insert_count = args.insert_count;
    }
    if (args.update_count !== undefined && args.update_count !== null) {
      this.update_count = args.update_count;
    }
    if (args.delete_count !== undefined && args.delete_count !== null) {
      this.delete_count = args.delete_count;
    }
    if (args.is_error !== undefined && args.is_error !== null) {
      this.is_error = args.is_error;
    }
    if (args.error_text !== undefined && args.error_text !== null) {
      this.error_text = args.error_text;
    }
  }
};
L2SegmentUpsertResponse.prototype = {};
L2SegmentUpsertResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.insert_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.update_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.delete_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_error = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.error_text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

L2SegmentUpsertResponse.prototype.write = function(output) {
  output.writeStructBegin('L2SegmentUpsertResponse');
  if (this.insert_count !== null && this.insert_count !== undefined) {
    output.writeFieldBegin('insert_count', Thrift.Type.I32, 1);
    output.writeI32(this.insert_count);
    output.writeFieldEnd();
  }
  if (this.update_count !== null && this.update_count !== undefined) {
    output.writeFieldBegin('update_count', Thrift.Type.I32, 2);
    output.writeI32(this.update_count);
    output.writeFieldEnd();
  }
  if (this.delete_count !== null && this.delete_count !== undefined) {
    output.writeFieldBegin('delete_count', Thrift.Type.I32, 3);
    output.writeI32(this.delete_count);
    output.writeFieldEnd();
  }
  if (this.is_error !== null && this.is_error !== undefined) {
    output.writeFieldBegin('is_error', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_error);
    output.writeFieldEnd();
  }
  if (this.error_text !== null && this.error_text !== undefined) {
    output.writeFieldBegin('error_text', Thrift.Type.STRING, 5);
    output.writeString(this.error_text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

L2SegmentDeleteResponse = function(args) {
  this.delete_count = null;
  this.is_error = null;
  this.error_text = null;
  if (args) {
    if (args.delete_count !== undefined && args.delete_count !== null) {
      this.delete_count = args.delete_count;
    }
    if (args.is_error !== undefined && args.is_error !== null) {
      this.is_error = args.is_error;
    }
    if (args.error_text !== undefined && args.error_text !== null) {
      this.error_text = args.error_text;
    }
  }
};
L2SegmentDeleteResponse.prototype = {};
L2SegmentDeleteResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.delete_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_error = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.error_text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

L2SegmentDeleteResponse.prototype.write = function(output) {
  output.writeStructBegin('L2SegmentDeleteResponse');
  if (this.delete_count !== null && this.delete_count !== undefined) {
    output.writeFieldBegin('delete_count', Thrift.Type.I32, 1);
    output.writeI32(this.delete_count);
    output.writeFieldEnd();
  }
  if (this.is_error !== null && this.is_error !== undefined) {
    output.writeFieldBegin('is_error', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_error);
    output.writeFieldEnd();
  }
  if (this.error_text !== null && this.error_text !== undefined) {
    output.writeFieldBegin('error_text', Thrift.Type.STRING, 4);
    output.writeString(this.error_text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

