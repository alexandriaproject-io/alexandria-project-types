// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package common

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - RequestID
//  - Prompt
type SinglePrompt struct {
  RequestID string `thrift:"request_id,1,required" db:"request_id" json:"request_id"`
  Prompt *string `thrift:"prompt,2" db:"prompt" json:"prompt,omitempty"`
}

func NewSinglePrompt() *SinglePrompt {
  return &SinglePrompt{}
}


func (p *SinglePrompt) GetRequestID() string {
  return p.RequestID
}
var SinglePrompt_Prompt_DEFAULT string
func (p *SinglePrompt) GetPrompt() string {
  if !p.IsSetPrompt() {
    return SinglePrompt_Prompt_DEFAULT
  }
return *p.Prompt
}
func (p *SinglePrompt) IsSetPrompt() bool {
  return p.Prompt != nil
}

func (p *SinglePrompt) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetRequestID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestID is not set"));
  }
  return nil
}

func (p *SinglePrompt)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *SinglePrompt)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Prompt = &v
}
  return nil
}

func (p *SinglePrompt) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SinglePrompt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SinglePrompt) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *SinglePrompt) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrompt() {
    if err := oprot.WriteFieldBegin("prompt", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prompt: ", p), err) }
    if err := oprot.WriteString(string(*p.Prompt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prompt (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prompt: ", p), err) }
  }
  return err
}

func (p *SinglePrompt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SinglePrompt(%+v)", *p)
}

// Attributes:
//  - NumBeams
//  - DoSample
//  - Temperature
//  - TopP
//  - TopK
//  - MaxNewTokens
//  - RepetitionPenalty
//  - LengthPenalty
type GenerationConfig struct {
  NumBeams *int32 `thrift:"num_beams,1" db:"num_beams" json:"num_beams,omitempty"`
  DoSample *bool `thrift:"do_sample,2" db:"do_sample" json:"do_sample,omitempty"`
  Temperature *float64 `thrift:"temperature,3" db:"temperature" json:"temperature,omitempty"`
  TopP *float64 `thrift:"top_p,4" db:"top_p" json:"top_p,omitempty"`
  TopK *int32 `thrift:"top_k,5" db:"top_k" json:"top_k,omitempty"`
  MaxNewTokens *int32 `thrift:"max_new_tokens,6" db:"max_new_tokens" json:"max_new_tokens,omitempty"`
  RepetitionPenalty *float64 `thrift:"repetition_penalty,7" db:"repetition_penalty" json:"repetition_penalty,omitempty"`
  LengthPenalty *float64 `thrift:"length_penalty,8" db:"length_penalty" json:"length_penalty,omitempty"`
}

func NewGenerationConfig() *GenerationConfig {
  return &GenerationConfig{}
}

var GenerationConfig_NumBeams_DEFAULT int32
func (p *GenerationConfig) GetNumBeams() int32 {
  if !p.IsSetNumBeams() {
    return GenerationConfig_NumBeams_DEFAULT
  }
return *p.NumBeams
}
var GenerationConfig_DoSample_DEFAULT bool
func (p *GenerationConfig) GetDoSample() bool {
  if !p.IsSetDoSample() {
    return GenerationConfig_DoSample_DEFAULT
  }
return *p.DoSample
}
var GenerationConfig_Temperature_DEFAULT float64
func (p *GenerationConfig) GetTemperature() float64 {
  if !p.IsSetTemperature() {
    return GenerationConfig_Temperature_DEFAULT
  }
return *p.Temperature
}
var GenerationConfig_TopP_DEFAULT float64
func (p *GenerationConfig) GetTopP() float64 {
  if !p.IsSetTopP() {
    return GenerationConfig_TopP_DEFAULT
  }
return *p.TopP
}
var GenerationConfig_TopK_DEFAULT int32
func (p *GenerationConfig) GetTopK() int32 {
  if !p.IsSetTopK() {
    return GenerationConfig_TopK_DEFAULT
  }
return *p.TopK
}
var GenerationConfig_MaxNewTokens_DEFAULT int32
func (p *GenerationConfig) GetMaxNewTokens() int32 {
  if !p.IsSetMaxNewTokens() {
    return GenerationConfig_MaxNewTokens_DEFAULT
  }
return *p.MaxNewTokens
}
var GenerationConfig_RepetitionPenalty_DEFAULT float64
func (p *GenerationConfig) GetRepetitionPenalty() float64 {
  if !p.IsSetRepetitionPenalty() {
    return GenerationConfig_RepetitionPenalty_DEFAULT
  }
return *p.RepetitionPenalty
}
var GenerationConfig_LengthPenalty_DEFAULT float64
func (p *GenerationConfig) GetLengthPenalty() float64 {
  if !p.IsSetLengthPenalty() {
    return GenerationConfig_LengthPenalty_DEFAULT
  }
return *p.LengthPenalty
}
func (p *GenerationConfig) IsSetNumBeams() bool {
  return p.NumBeams != nil
}

func (p *GenerationConfig) IsSetDoSample() bool {
  return p.DoSample != nil
}

func (p *GenerationConfig) IsSetTemperature() bool {
  return p.Temperature != nil
}

func (p *GenerationConfig) IsSetTopP() bool {
  return p.TopP != nil
}

func (p *GenerationConfig) IsSetTopK() bool {
  return p.TopK != nil
}

func (p *GenerationConfig) IsSetMaxNewTokens() bool {
  return p.MaxNewTokens != nil
}

func (p *GenerationConfig) IsSetRepetitionPenalty() bool {
  return p.RepetitionPenalty != nil
}

func (p *GenerationConfig) IsSetLengthPenalty() bool {
  return p.LengthPenalty != nil
}

func (p *GenerationConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GenerationConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumBeams = &v
}
  return nil
}

func (p *GenerationConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DoSample = &v
}
  return nil
}

func (p *GenerationConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Temperature = &v
}
  return nil
}

func (p *GenerationConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TopP = &v
}
  return nil
}

func (p *GenerationConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TopK = &v
}
  return nil
}

func (p *GenerationConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxNewTokens = &v
}
  return nil
}

func (p *GenerationConfig)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RepetitionPenalty = &v
}
  return nil
}

func (p *GenerationConfig)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.LengthPenalty = &v
}
  return nil
}

func (p *GenerationConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerationConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GenerationConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumBeams() {
    if err := oprot.WriteFieldBegin("num_beams", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_beams: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NumBeams)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.num_beams (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_beams: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoSample() {
    if err := oprot.WriteFieldBegin("do_sample", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:do_sample: ", p), err) }
    if err := oprot.WriteBool(bool(*p.DoSample)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.do_sample (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:do_sample: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTemperature() {
    if err := oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:temperature: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Temperature)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.temperature (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:temperature: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTopP() {
    if err := oprot.WriteFieldBegin("top_p", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:top_p: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.TopP)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.top_p (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:top_p: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTopK() {
    if err := oprot.WriteFieldBegin("top_k", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:top_k: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TopK)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.top_k (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:top_k: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNewTokens() {
    if err := oprot.WriteFieldBegin("max_new_tokens", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_new_tokens: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxNewTokens)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_new_tokens (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_new_tokens: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetRepetitionPenalty() {
    if err := oprot.WriteFieldBegin("repetition_penalty", thrift.DOUBLE, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:repetition_penalty: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.RepetitionPenalty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.repetition_penalty (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:repetition_penalty: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetLengthPenalty() {
    if err := oprot.WriteFieldBegin("length_penalty", thrift.DOUBLE, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:length_penalty: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.LengthPenalty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.length_penalty (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:length_penalty: ", p), err) }
  }
  return err
}

func (p *GenerationConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GenerationConfig(%+v)", *p)
}

