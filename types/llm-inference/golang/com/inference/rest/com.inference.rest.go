// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rest

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"com/inference/common"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
// Attributes:
//  - RequestID
//  - Prompt
//  - StreamResponse
//  - OnlyNewTokens
//  - GenerationConfig
type ApiSinglePromptRequest struct {
  RequestID string `thrift:"request_id,1,required" db:"request_id" json:"request_id"`
  Prompt *string `thrift:"prompt,2" db:"prompt" json:"prompt,omitempty"`
  StreamResponse *bool `thrift:"stream_response,3" db:"stream_response" json:"stream_response,omitempty"`
  OnlyNewTokens *bool `thrift:"only_new_tokens,4" db:"only_new_tokens" json:"only_new_tokens,omitempty"`
  GenerationConfig *common.GenerationConfig `thrift:"generation_config,5" db:"generation_config" json:"generation_config,omitempty"`
}

func NewApiSinglePromptRequest() *ApiSinglePromptRequest {
  return &ApiSinglePromptRequest{}
}


func (p *ApiSinglePromptRequest) GetRequestID() string {
  return p.RequestID
}
var ApiSinglePromptRequest_Prompt_DEFAULT string
func (p *ApiSinglePromptRequest) GetPrompt() string {
  if !p.IsSetPrompt() {
    return ApiSinglePromptRequest_Prompt_DEFAULT
  }
return *p.Prompt
}
var ApiSinglePromptRequest_StreamResponse_DEFAULT bool
func (p *ApiSinglePromptRequest) GetStreamResponse() bool {
  if !p.IsSetStreamResponse() {
    return ApiSinglePromptRequest_StreamResponse_DEFAULT
  }
return *p.StreamResponse
}
var ApiSinglePromptRequest_OnlyNewTokens_DEFAULT bool
func (p *ApiSinglePromptRequest) GetOnlyNewTokens() bool {
  if !p.IsSetOnlyNewTokens() {
    return ApiSinglePromptRequest_OnlyNewTokens_DEFAULT
  }
return *p.OnlyNewTokens
}
var ApiSinglePromptRequest_GenerationConfig_DEFAULT *common.GenerationConfig
func (p *ApiSinglePromptRequest) GetGenerationConfig() *common.GenerationConfig {
  if !p.IsSetGenerationConfig() {
    return ApiSinglePromptRequest_GenerationConfig_DEFAULT
  }
return p.GenerationConfig
}
func (p *ApiSinglePromptRequest) IsSetPrompt() bool {
  return p.Prompt != nil
}

func (p *ApiSinglePromptRequest) IsSetStreamResponse() bool {
  return p.StreamResponse != nil
}

func (p *ApiSinglePromptRequest) IsSetOnlyNewTokens() bool {
  return p.OnlyNewTokens != nil
}

func (p *ApiSinglePromptRequest) IsSetGenerationConfig() bool {
  return p.GenerationConfig != nil
}

func (p *ApiSinglePromptRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetRequestID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestID is not set"));
  }
  return nil
}

func (p *ApiSinglePromptRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *ApiSinglePromptRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Prompt = &v
}
  return nil
}

func (p *ApiSinglePromptRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StreamResponse = &v
}
  return nil
}

func (p *ApiSinglePromptRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OnlyNewTokens = &v
}
  return nil
}

func (p *ApiSinglePromptRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.GenerationConfig = &common.GenerationConfig{}
  if err := p.GenerationConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GenerationConfig), err)
  }
  return nil
}

func (p *ApiSinglePromptRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ApiSinglePromptRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApiSinglePromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *ApiSinglePromptRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrompt() {
    if err := oprot.WriteFieldBegin("prompt", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prompt: ", p), err) }
    if err := oprot.WriteString(string(*p.Prompt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prompt (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prompt: ", p), err) }
  }
  return err
}

func (p *ApiSinglePromptRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStreamResponse() {
    if err := oprot.WriteFieldBegin("stream_response", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stream_response: ", p), err) }
    if err := oprot.WriteBool(bool(*p.StreamResponse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stream_response (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stream_response: ", p), err) }
  }
  return err
}

func (p *ApiSinglePromptRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlyNewTokens() {
    if err := oprot.WriteFieldBegin("only_new_tokens", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:only_new_tokens: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OnlyNewTokens)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.only_new_tokens (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:only_new_tokens: ", p), err) }
  }
  return err
}

func (p *ApiSinglePromptRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetGenerationConfig() {
    if err := oprot.WriteFieldBegin("generation_config", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:generation_config: ", p), err) }
    if err := p.GenerationConfig.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GenerationConfig), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:generation_config: ", p), err) }
  }
  return err
}

func (p *ApiSinglePromptRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApiSinglePromptRequest(%+v)", *p)
}

// Attributes:
//  - Text
type ApiSinglePromptStream struct {
  Text string `thrift:"text,1" db:"text" json:"text"`
}

func NewApiSinglePromptStream() *ApiSinglePromptStream {
  return &ApiSinglePromptStream{}
}


func (p *ApiSinglePromptStream) GetText() string {
  return p.Text
}
func (p *ApiSinglePromptStream) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApiSinglePromptStream)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *ApiSinglePromptStream) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ApiSinglePromptStream"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApiSinglePromptStream) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:text: ", p), err) }
  return err
}

func (p *ApiSinglePromptStream) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApiSinglePromptStream(%+v)", *p)
}

// Attributes:
//  - Prompts
//  - OnlyNewTokens
//  - GenerationConfig
type ApiBatchPromptRequest struct {
  Prompts []*common.SinglePrompt `thrift:"prompts,1" db:"prompts" json:"prompts"`
  OnlyNewTokens *bool `thrift:"only_new_tokens,2" db:"only_new_tokens" json:"only_new_tokens,omitempty"`
  GenerationConfig *common.GenerationConfig `thrift:"generation_config,3" db:"generation_config" json:"generation_config,omitempty"`
}

func NewApiBatchPromptRequest() *ApiBatchPromptRequest {
  return &ApiBatchPromptRequest{}
}


func (p *ApiBatchPromptRequest) GetPrompts() []*common.SinglePrompt {
  return p.Prompts
}
var ApiBatchPromptRequest_OnlyNewTokens_DEFAULT bool
func (p *ApiBatchPromptRequest) GetOnlyNewTokens() bool {
  if !p.IsSetOnlyNewTokens() {
    return ApiBatchPromptRequest_OnlyNewTokens_DEFAULT
  }
return *p.OnlyNewTokens
}
var ApiBatchPromptRequest_GenerationConfig_DEFAULT *common.GenerationConfig
func (p *ApiBatchPromptRequest) GetGenerationConfig() *common.GenerationConfig {
  if !p.IsSetGenerationConfig() {
    return ApiBatchPromptRequest_GenerationConfig_DEFAULT
  }
return p.GenerationConfig
}
func (p *ApiBatchPromptRequest) IsSetOnlyNewTokens() bool {
  return p.OnlyNewTokens != nil
}

func (p *ApiBatchPromptRequest) IsSetGenerationConfig() bool {
  return p.GenerationConfig != nil
}

func (p *ApiBatchPromptRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApiBatchPromptRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SinglePrompt, 0, size)
  p.Prompts =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &common.SinglePrompt{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Prompts = append(p.Prompts, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApiBatchPromptRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OnlyNewTokens = &v
}
  return nil
}

func (p *ApiBatchPromptRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.GenerationConfig = &common.GenerationConfig{}
  if err := p.GenerationConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GenerationConfig), err)
  }
  return nil
}

func (p *ApiBatchPromptRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ApiBatchPromptRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApiBatchPromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prompts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prompts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Prompts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Prompts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prompts: ", p), err) }
  return err
}

func (p *ApiBatchPromptRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlyNewTokens() {
    if err := oprot.WriteFieldBegin("only_new_tokens", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:only_new_tokens: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OnlyNewTokens)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.only_new_tokens (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:only_new_tokens: ", p), err) }
  }
  return err
}

func (p *ApiBatchPromptRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetGenerationConfig() {
    if err := oprot.WriteFieldBegin("generation_config", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:generation_config: ", p), err) }
    if err := p.GenerationConfig.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GenerationConfig), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:generation_config: ", p), err) }
  }
  return err
}

func (p *ApiBatchPromptRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApiBatchPromptRequest(%+v)", *p)
}

// Attributes:
//  - RequestID
//  - Prompt
//  - Response
type ApiBatchPrompt struct {
  RequestID string `thrift:"request_id,1" db:"request_id" json:"request_id"`
  Prompt *string `thrift:"prompt,2" db:"prompt" json:"prompt,omitempty"`
  Response string `thrift:"response,3" db:"response" json:"response"`
}

func NewApiBatchPrompt() *ApiBatchPrompt {
  return &ApiBatchPrompt{}
}


func (p *ApiBatchPrompt) GetRequestID() string {
  return p.RequestID
}
var ApiBatchPrompt_Prompt_DEFAULT string
func (p *ApiBatchPrompt) GetPrompt() string {
  if !p.IsSetPrompt() {
    return ApiBatchPrompt_Prompt_DEFAULT
  }
return *p.Prompt
}

func (p *ApiBatchPrompt) GetResponse() string {
  return p.Response
}
func (p *ApiBatchPrompt) IsSetPrompt() bool {
  return p.Prompt != nil
}

func (p *ApiBatchPrompt) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApiBatchPrompt)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *ApiBatchPrompt)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Prompt = &v
}
  return nil
}

func (p *ApiBatchPrompt)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Response = v
}
  return nil
}

func (p *ApiBatchPrompt) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ApiBatchPrompt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApiBatchPrompt) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteString(string(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *ApiBatchPrompt) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrompt() {
    if err := oprot.WriteFieldBegin("prompt", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prompt: ", p), err) }
    if err := oprot.WriteString(string(*p.Prompt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prompt (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prompt: ", p), err) }
  }
  return err
}

func (p *ApiBatchPrompt) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("response", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:response: ", p), err) }
  if err := oprot.WriteString(string(p.Response)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.response (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:response: ", p), err) }
  return err
}

func (p *ApiBatchPrompt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApiBatchPrompt(%+v)", *p)
}

// Attributes:
//  - Responses
type ApiBatchPromptResponse struct {
  Responses []*ApiBatchPrompt `thrift:"responses,1" db:"responses" json:"responses"`
}

func NewApiBatchPromptResponse() *ApiBatchPromptResponse {
  return &ApiBatchPromptResponse{}
}


func (p *ApiBatchPromptResponse) GetResponses() []*ApiBatchPrompt {
  return p.Responses
}
func (p *ApiBatchPromptResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApiBatchPromptResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ApiBatchPrompt, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &ApiBatchPrompt{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Responses = append(p.Responses, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApiBatchPromptResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ApiBatchPromptResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApiBatchPromptResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("responses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Responses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Responses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  return err
}

func (p *ApiBatchPromptResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApiBatchPromptResponse(%+v)", *p)
}

