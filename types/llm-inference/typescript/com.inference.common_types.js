//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


SinglePrompt = function(args) {
  this.request_id = null;
  this.prompt = null;
  if (args) {
    if (args.request_id !== undefined && args.request_id !== null) {
      this.request_id = args.request_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field request_id is unset!');
    }
    if (args.prompt !== undefined && args.prompt !== null) {
      this.prompt = args.prompt;
    }
  }
};
SinglePrompt.prototype = {};
SinglePrompt.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.request_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prompt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SinglePrompt.prototype.write = function(output) {
  output.writeStructBegin('SinglePrompt');
  if (this.request_id !== null && this.request_id !== undefined) {
    output.writeFieldBegin('request_id', Thrift.Type.STRING, 1);
    output.writeString(this.request_id);
    output.writeFieldEnd();
  }
  if (this.prompt !== null && this.prompt !== undefined) {
    output.writeFieldBegin('prompt', Thrift.Type.STRING, 2);
    output.writeString(this.prompt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GenerationConfig = function(args) {
  this.num_beams = null;
  this.do_sample = null;
  this.temperature = null;
  this.top_p = null;
  this.top_k = null;
  this.max_new_tokens = null;
  this.repetition_penalty = null;
  this.length_penalty = null;
  if (args) {
    if (args.num_beams !== undefined && args.num_beams !== null) {
      this.num_beams = args.num_beams;
    }
    if (args.do_sample !== undefined && args.do_sample !== null) {
      this.do_sample = args.do_sample;
    }
    if (args.temperature !== undefined && args.temperature !== null) {
      this.temperature = args.temperature;
    }
    if (args.top_p !== undefined && args.top_p !== null) {
      this.top_p = args.top_p;
    }
    if (args.top_k !== undefined && args.top_k !== null) {
      this.top_k = args.top_k;
    }
    if (args.max_new_tokens !== undefined && args.max_new_tokens !== null) {
      this.max_new_tokens = args.max_new_tokens;
    }
    if (args.repetition_penalty !== undefined && args.repetition_penalty !== null) {
      this.repetition_penalty = args.repetition_penalty;
    }
    if (args.length_penalty !== undefined && args.length_penalty !== null) {
      this.length_penalty = args.length_penalty;
    }
  }
};
GenerationConfig.prototype = {};
GenerationConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_beams = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.do_sample = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.temperature = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.top_p = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.top_k = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.max_new_tokens = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.repetition_penalty = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.length_penalty = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GenerationConfig.prototype.write = function(output) {
  output.writeStructBegin('GenerationConfig');
  if (this.num_beams !== null && this.num_beams !== undefined) {
    output.writeFieldBegin('num_beams', Thrift.Type.I32, 1);
    output.writeI32(this.num_beams);
    output.writeFieldEnd();
  }
  if (this.do_sample !== null && this.do_sample !== undefined) {
    output.writeFieldBegin('do_sample', Thrift.Type.BOOL, 2);
    output.writeBool(this.do_sample);
    output.writeFieldEnd();
  }
  if (this.temperature !== null && this.temperature !== undefined) {
    output.writeFieldBegin('temperature', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.temperature);
    output.writeFieldEnd();
  }
  if (this.top_p !== null && this.top_p !== undefined) {
    output.writeFieldBegin('top_p', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.top_p);
    output.writeFieldEnd();
  }
  if (this.top_k !== null && this.top_k !== undefined) {
    output.writeFieldBegin('top_k', Thrift.Type.I32, 5);
    output.writeI32(this.top_k);
    output.writeFieldEnd();
  }
  if (this.max_new_tokens !== null && this.max_new_tokens !== undefined) {
    output.writeFieldBegin('max_new_tokens', Thrift.Type.I32, 6);
    output.writeI32(this.max_new_tokens);
    output.writeFieldEnd();
  }
  if (this.repetition_penalty !== null && this.repetition_penalty !== undefined) {
    output.writeFieldBegin('repetition_penalty', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.repetition_penalty);
    output.writeFieldEnd();
  }
  if (this.length_penalty !== null && this.length_penalty !== undefined) {
    output.writeFieldBegin('length_penalty', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.length_penalty);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

